LC 74. Search a 2D Matrix

Write an efficient algorithm that searches for a value in an m x n matrix.
This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if (matrix.size() == 0) {
            return false;
        }
        int r = 0;
        if (matrix[0].size() == 0) {
            return false;
        }
        int c = matrix[0].size()-1;
        
        while((r <= matrix.size()-1) && (c >= 0)) {
            if (target == matrix[r][c]) {
                return true;
            } else if (target < matrix[r][c]) {
                c--;
            } else {
                r++;
            }
        }
        return false;
    }
};



LC 240. Search a 2D Matrix II
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

EXACTLY SAME AS LC 74



LC 54. Spiral Matrix
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

vector<int> spiralOrder(vector<vector<int>>& m) {
        int sr = 0, er = m.size()-1;
        int sc = 0, ec = 0;
        if (m.size()) {
            ec = m[0].size()-1;
        }
        vector<int> res;
        while ((sr <= er) && (sc <= ec)) {
            for (int i = sc; i <= ec; i++) {
                res.push_back(m[sr][i]);
            }
            sr++;
            if (sr > er) { break; }
            for(int i = sr; i <= er; i++) {
                res.push_back(m[i][ec]);
            }
            ec--;
            if(ec < sc) { break; }
            for (int i = ec; i >= sc; i--) {
                res.push_back(m[er][i]);
            }
            er--;
            if (er < sr) { break; }
            for (int i = er; i >= sr; i--) {
                res.push_back(m[i][sc]);
            }
            sc++;
        }
        return res;
    }


LC 378. Kth Smallest Element in a Sorted Matrix
Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

class Solution {
public:
    int kthSmallest(vector<vector<int>>& m, int k) {
        int se = m[0][0];
        int ee = m[m.size()-1][m.size()-1];
        
        while(se < ee) {
            int mid = se + (ee - se)/2;
            int num = 0;
            for (int i = 0; i < m.size(); i++) {
                num += (upper_bound(m[i].begin(), m[i].end(), mid) - m[i].begin());
            }
            
            if (num < k) {
                se = mid + 1;
            } else {
                ee = mid;
            }
        }
        
        return se;
    }
};


